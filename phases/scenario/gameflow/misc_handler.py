# phases/scenario/handlers/misc_handler.py
class MiscHandler:
    def __init__(self, ctx, state, convlog, infos):
        self.ctx = ctx
        self.state = state
        self.convlog = convlog
        self.infos = infos

    def handle(self, label: str, player_input: str) -> str:
        base_map = {
            "info_request": (
                "プレイヤーは状況や周囲の様子、あるいは情報を求めています。\n"
                "視覚・聴覚・知識などで自然に知り得る範囲は即答してください。\n"
                "不確実な場合は、行為判定を行う必要があることを伝えてください。\n"
                "知り得ない情報をネタバレすることは避けてください。"
            ),
            "gm_query": (
"""
プレイヤーは進行方針や判定の是非について疑問を述べています。
その意図をくみ取り、簡潔に返答してください。
"""
            ),
            "system":(
"""
プレイヤーはルールや操作に関する情報を求めています。
簡潔かつ正確に案内してください。
以下返答用情報
**このシステムにセーブや中断と言った機能はありません。判定中を除いて基本的に常時ログとして保存され、再度開始時に自動でログから復元されます。**

・行為判定用スキルについて　聞かれたら以下の情報を提供しても構いません　これ以上の詳細は秘匿情報です。
"探知": 五感を使って異常や隠されたものを見つけ出す。
"操身": 跳ぶ・登る・避けるなど、身体を使った動作全般。
"剛力": 重い物を動かす、破壊する、力で突破する。
"知性": 知識や論理思考によって物事を理解・分析する。
"直感": 違和感や正解を感覚的に見抜く。
"隠形": 姿や痕跡を隠し、気づかれずに行動する。
"看破": 人や物を問わず、嘘や偽りを見抜く。
"技巧": 鍵開けや罠の解除、道具の精密な操作など。
"説得": 言葉や態度で相手を動かす・納得させる。
"意志": 精神的影響に抗い、決して心折れず自我を保つ。
"強靭": 毒や病気、苦痛や疲労に耐える身体的抵抗力。
"希望": 詳細不明。あがき続けることでなにかが得られるかも。

・行為判定について（基本ルール）：
- 2d6（6面ダイス2個）を振り、出目の合計で判定します。
- 基本の目標値は【6】。状況に応じてこれが上下します。最低は2、最大は13です。
- キャラクターが対応スキルを持っている場合、その値分だけ達成値を補正します。
- 出目が目標値以上 → 成功、未満 → 失敗
- ただし、出目が 2（=1+1）の場合は目標値に関わらず「自動失敗（ファンブル）」
- 出目が 12（=6+6）の場合は無条件で「自動成功（クリティカル）」

・戦闘判定について（基本ルール）：

- プレイヤーは自由に「戦法」（どう戦うか・どう逃げるか）を宣言します。
- AIはその戦法を「有効性」と「キャラらしさ」で評価し、それぞれ0～2点でスコアをつけます。
- さらに、キャラクターのスキル構成から戦闘適性ボーナスが加算され、全体のボーナスが決定されます。
- 判定は2D6（2個のサイコロ）＋ボーナスで行われ、クリティカル（12）は自動成功、ファンブル（2）は自動失敗です。
- 評価に納得できなければ、プレイヤーは戦法を再提案することができます。
- 戦闘は最大2ラウンドまで行われます。

戦法の工夫、キャラクター性の反映が成功の鍵となります。
"""
            ),
            "other": (
                "プレイヤーの自由な発言や感想です。自然に反応してください。"
            )
        }
        base = base_map.get(label, "自然に対応してください。")

        sys = (
            "あなたはソロTRPGの進行役（GM）です。\n"
            "わかりやすさ優先・三人称・常体・ラノベ風で描写/回答してください。"
        )

        # Informationsの付加
        sys += "\n\n" + self.infos.build_prompt(
            include=["scenario","worldview","character","nouns","canon","plan"],
            chapter=self.state.chapter
        )
        sys += "\n\n" + base


        msgs = [{"role": "system", "content": sys}]
        msgs += self.convlog.get_slim()
        msgs.append({"role": "user", "content": player_input.strip()})

        out = self.ctx.engine.chat(
            messages=msgs,
            caller_name=f"MiscHandler:{label}",
            model_level="high",
            max_tokens=3000
        )
        
        return out
